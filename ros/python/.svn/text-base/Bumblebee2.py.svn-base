import time
import math
import copy 
import numpy as np
import scipy as sp 

import roslib; roslib.load_manifest('scripting_util')
import rospy
import message_filters

import std_msgs.msg as std_msgs
import geometry_msgs.msg as geometry_msgs
import sensor_msgs.msg as sensor_msgs
import std_srvs.srv as std_srvs
import visualization_msgs.msg as visualization_msgs

import Bumblebee2_msgs.msg as Bumblebee2_msgs
import Bumblebee2_msgs.srv as Bumblebee2_srvs

import Perception_msgs_upenn.msg as Perception_msgs
import Perception_msgs_upenn.srv as Perception_srvs

import RosUtil as ru
import Transform as tr
import threading
import led

LEFT_RAW_TOPIC           = '/BB2/left/image_raw';
RIGHT_RAW_TOPIC          = '/BB2/right/image_raw';
LEFT_UNRECT_COLOR_TOPIC  = '/BB2/left/image_color';
RIGHT_UNRECT_COLOR_TOPIC = '/BB2/right/image_color';
LEFT_RECT_COLOR_TOPIC    = '/BB2/left/image_rect_color';
RIGHT_RECT_COLOR_TOPIC   = '/BB2/right/image_rect_color';
LEFT_MONO_TOPIC          = '/BB2/left/image_rect';
RIGHT_MONO_TOPIC         = '/BB2/right/image_rect';
LEFT_INFO_TOPIC          = '/BB2/left/camera_info';
RIGHT_INFO_TOPIC         = '/BB2/right/camera_info';
POINTS_TOPIC             = '/BB2/points';
POINTS2_TOPIC            = '/BB2/points2';
POINTS_FILTERED_TOPIC    = '/BB2/filtered/points';
POINTS2_FILTERED_TOPIC   = '/BB2/filtered/points2';


properties = Bumblebee2_msgs.CamProperties();
info = Bumblebee2_msgs.CamInfo();

paperCandidates = [];
paperStamp = 0.0;

def Bumblebee2PropertiesCallback(data):
  global properties
  properties = data;

def Bumblebee2InfoCallback(data):
  global info 
  info = data;

def PaperCandidatesCallback(data):
  global paperCandidates, paperStamp
  paperStamp = rospy.Time().now().to_sec();
  paperCandidates = data.candidates;


## setup ros subscribers
rospy.logdebug(__name__ + ': setting up subscribers...');
# re2
rospy.Subscriber('/BB2/cam_properties', Bumblebee2_msgs.CamProperties, Bumblebee2PropertiesCallback, None, 1)
rospy.Subscriber('/BB2/cam_info', Bumblebee2_msgs.CamInfo, Bumblebee2InfoCallback, None, 1)
# upenn
rospy.Subscriber('/BB2/paper_candidate_centroid', Perception_msgs.PaperCandidates, PaperCandidatesCallback, None, 1);


## setup publishers
rospy.logdebug(__name__ + ': setting up publishers...');
# upenn
shutterPub = rospy.Publisher('/BB2/shutter', Perception_msgs.ShutterStamped);
shutterBlobPub = rospy.Publisher('/BB2/blob_shutter', Perception_msgs.ShutterStamped);
calibrationChessboardPositionsMarkersPub = rospy.Publisher('/calibration_markers_array', visualization_msgs.MarkerArray);

## setup services
rospy.logdebug(__name__ + ': setting up service connections...')
# re2 
setBrightnessService = ru.service_proxy('/BB2/set_brightness', Bumblebee2_srvs.SetBrightness, not ru.is_sim());
setConfigFileService = ru.service_proxy('/BB2/set_config_file', Bumblebee2_srvs.SetConfigFile, not ru.is_sim());
setExposureService = ru.service_proxy('/BB2/set_exposure', Bumblebee2_srvs.SetExposure, not ru.is_sim());
setFrameRateService = ru.service_proxy('/BB2/set_frame_rate', Bumblebee2_srvs.SetFrameRate, not ru.is_sim());
setGainService = ru.service_proxy('/BB2/set_gain', Bumblebee2_srvs.SetGain, not ru.is_sim());
setShutterService = ru.service_proxy('/BB2/set_shutter', Bumblebee2_srvs.SetShutter, not ru.is_sim());
setWhiteBalanceService = ru.service_proxy('/BB2/set_white_balance', Bumblebee2_srvs.SetWhiteBalance, not ru.is_sim());
# upenn
tabletopBlobDetector = ru.service_proxy('/BB2/tabletop_blob_detector', Perception_srvs.TabletopBlobDetector, not ru.is_sim());
redDotDetector = ru.service_proxy('/detect_dot', Perception_srvs.DetectDot, not ru.is_sim());
redDotPairsDetector = ru.service_proxy('/detect_dot_pairs', Perception_srvs.DetectDot, not ru.is_sim());
WristDetector = ru.service_proxy('/detect_wrist', Perception_srvs.DetectWrist, not ru.is_sim());


def set_brightness(value):
  try:
    resp = setBrightnessService(value);
    rospy.loginfo(__name__ + ': set brightness to %0.3f' % resp.value);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetBrightness service request failed:\t%s' % str(e));

def set_config_file(filename):
  try:
    resp = setConfigFileService(filename);
    rospy.loginfo(__name__ + ': set config file to %s' % resp.filename);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetConfigFile service request failed:\t%s' % str(e));

def set_exposure(value, autoSet=False, manualPush=False):
  try:
    resp = setExposureService(value, autoSet, manualPush);
    rospy.loginfo(__name__ + ': set exposure value=%0.3f autoSet=%s manualPush=%s' % (resp.value, resp.autoSet, resp.manualPush));
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetExposure service request failed:\t%s' % str(e));

def set_frame_rate(value, autoSet=False):
  try:
    resp = setFrameRateService(value, autoSet);
    rospy.loginfo(__name__ + ': set frame rate value=%0.3f autoSet=%s' % (resp.value, resp.autoSet));
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetFrameRate service request failed:\t%s' % str(e));

def set_gain(value, autoSet=False, manualPush=False):
  try:
    resp = setGainService(value, autoSet, manualPush);
    rospy.loginfo(__name__ + ': set gain value=%0.3f autoSet=%s manualPush=%s' % (resp.value, resp.autoSet, resp.manualPush));
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetGain service request failed:\t%s' % str(e));

def set_shutter(value, autoSet=False, manualPush=False):
  try:
    resp = setShutterService(value, autoSet, manualPush);
    rospy.loginfo(__name__ + ': set shutter value=%0.3f autoSet=%s manualPush=%s' % (resp.value, resp.autoSet, resp.manualPush));
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetShutter service request failed:\t%s' % str(e));

def set_white_balance(redValue, blueValue, autoSet=False, manualPush=False):
  try:
    resp = setWhiteBalanceService(redValue, blueValue, autoSet, manualPush);
    rospy.loginfo(__name__ + ': set white balance redValue=%0.3f blueValue=%0.3f autoSet=%s manualPush=%s' % (resp.redValue, resp.blueValue, resp.autoSet, resp.manualPush));
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': SetWhiteBalance service request failed:\t%s' % str(e));

def all_auto():
  global properties
  set_exposure(properties.exposure, autoSet=True);
  set_frame_rate(properties.frameRate, autoSet=True);
  set_gain(properties.gain, autoSet=True); 
  set_shutter(properties.shutter, autoSet=True);
  set_white_balance(properties.whiteBalanceRed, properties.whiteBalanceBlue, autoSet=True);

def auto_off():
  global properties
  set_exposure(properties.exposure, autoSet=False);
  set_frame_rate(properties.frameRate, autoSet=False);
  set_gain(properties.gain, autoSet=False); 
  set_shutter(properties.shutter, autoSet=False);
  set_white_balance(properties.whiteBalanceRed, properties.whiteBalanceBlue, autoSet=False);


def shutter():
  ''' shutters Bumblebee2 images '''
  t0 = rospy.Time().now();
  shutterPub.publish(Perception_msgs.ShutterStamped(rospy.Header(0, t0, '/baseLink')));
  shutterBlobPub.publish(Perception_msgs.ShutterStamped(rospy.Header(0, t0, '/baseLink')));


def get_points(filtered=True):
  ''' returns the filtered disparity point cloud '''
  topic = POINTS_FILTERED_TOPIC if filtered else POINTS_TOPIC 
  return rospy.wait_for_message(topic, sensor_msgs.PointCloud);


def get_points2(filtered=True):
  ''' returns the filtered disparity point cloud 2 '''
  topic = POINTS2_FILTERED_TOPIC if filtered else POINTS2_TOPIC 
  return rospy.wait_for_message(topic, sensor_msgs.PointCloud2);


def get_left(raw=False):
  ''' returns the left color image '''
  if raw:
    return rospy.wait_for_message(LEFT_RAW_TOPIC, sensor_msgs.Image);
  else:
    return rospy.wait_for_message(LEFT_RECT_COLOR_TOPIC, sensor_msgs.Image);


def get_right(raw=False):
  ''' returns the right color image '''
  if raw:
    return rospy.wait_for_message(RIGHT_RAW_TOPIC, sensor_msgs.Image);
  else:
    return rospy.wait_for_message(RIGHT_RECT_COLOR_TOPIC, sensor_msgs.Image);


def get_left_info():
  ''' returns the left image info '''
  return rospy.wait_for_message(LEFT_INFO_TOPIC, sensor_msgs.CameraInfo);


def get_right_info():
  ''' returns the right image info '''
  return rospy.wait_for_message(RIGHT_INFO_TOPIC, sensor_msgs.CameraInfo);


def get_stereo_color(raw=False,rect=True):
  ''' returns the left and right color images defaults to color rectified'''
  types = [sensor_msgs.Image, sensor_msgs.Image]; 
  if raw:
    topics = [LEFT_RAW_TOPIC, RIGHT_RAW_TOPIC];
  else:
    if rect:
      topics = [LEFT_RECT_COLOR_TOPIC, RIGHT_RECT_COLOR_TOPIC];
    else:
      topics = [LEFT_UNRECT_COLOR_TOPIC, RIGHT_UNRECT_COLOR_TOPIC];

  return ru.wait_for_sync_message(topics, types);


def get_stereo_mono():
  ''' returns the left and right rectified grayscale images '''
  topics = [LEFT_MONO_TOPIC, RIGHT_MONO_TOPIC];
  types = [sensor_msgs.Image, sensor_msgs.Image]; 
    
  return ru.wait_for_sync_message(topics, types);


def get_stereo_info():
  ''' returns the left and right rectified grayscale images '''
  topics = [LEFT_INFO_TOPIC, RIGHT_INFO_TOPIC];
  types = [sensor_msgs.CameraInfo, sensor_msgs.CameraInfo]; 
    
  return ru.wait_for_sync_message(topics, types);


def shutter_paper():
  ''' shutters Bumblebee2 image to trigger paper detector '''
  t0 = rospy.Time().now();
  shutterPub.publish(Perception_msgs.ShutterStamped(rospy.Header(0, t0, '/baseLink')));


def shutter_blob():
  ''' shutters Bumblebee2 image to trigger blob detector '''
  t0 = rospy.Time().now();
  shutterBlobPub.publish(Perception_msgs.ShutterStamped(rospy.Header(0, t0, '/baseLink')));


def tabletop_blob():
  try:
    resp = tabletopBlobDetector();
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': TabletopBlobDetector service request failed:\t%s' % str(e));
    return Perception_srvs.TabletopBlobDetectorResponse().blobs_stamped;
  
  return resp.blobs_stamped;


def red_dot_detector(pairs=False):
  ''' 
    calls the red dot detector
    return a PoseArray containing all red dot detections
  '''
  try:
    if pairs:
      resp = redDotPairsDetector();
    else:
      resp = redDotDetector();
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': RedDotDetector service request failed:\t%s' % str(e));
    return geometry_msgs.PoseArray();

  return resp.dots;


def wrist_detector(init=False):
  ''' 
    calls the wrist detector service
    return the wrist pose as a PoseStamped msg

    init should be true for initializing the detector
  '''
  try:
    led.set_right('w');
    resp = WristDetector(set_secondary=init);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': WristDetector service request failed:\t%s' % str(e));
    led.set_right('k');
    return None;
  
  led.set_right('k');
  return resp.wrist;





def publish_calibration_chessboard_markers(delete=False):
  '''
    publishes markers that indicate the positions of the chessboards in the world
  '''
  pos = ((0.75, -1.0, 0.05), (0.80, 0.50, 0.05), (1.40, -0.20, 0.05));
  nxm = ('7x8 board', '5x6 board', '6x9 board');
  ma = visualization_msgs.MarkerArray();

  bmarker = visualization_msgs.Marker();
  bmarker.ns = 'calibration_chessboard_positions';
  bmarker.header = ru.header(stamp=rospy.Time().now(), frame_id=ru.BASE_FRAME);
  bmarker.action = bmarker.DELETE if delete else bmarker.ADD; 
  bmarker.lifetime = rospy.Duration(10*60.0);
  bmarker.frame_locked = True;



  for i in range(len(pos)):
    marker = copy.deepcopy(bmarker);
    marker.id = 2*i + 0;
    marker.pose = ru.to_Pose(tr.trans(pos[i]));
    marker.type = marker.CUBE;
    marker.scale = ru.to_Vector3([(0.0254*8.5), (0.0254*11.0), 0.005]);
    marker.color = std_msgs.ColorRGBA(r=1.0, g=1.0, b=1.0, a=1.0);
    ma.markers.append(marker);

    marker = copy.deepcopy(bmarker);
    marker.id = 2*i + 1;
    marker.pose = ru.to_Pose(tr.trans(pos[i]));
    marker.pose.position.z += .2;
    marker.type = marker.TEXT_VIEW_FACING;
    marker.scale = ru.to_Vector3([.1, .1, .1]);
    marker.color = std_msgs.ColorRGBA(r=0.0, g=1.0, b=0.0, a=1.0);
    marker.text = nxm[i];
    ma.markers.append(marker);

  calibrationChessboardPositionsMarkersPub.publish(ma);

