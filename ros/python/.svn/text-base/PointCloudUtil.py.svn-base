import sys
import time
import math
import copy 
import string
import struct
import random
import numpy as np
import scipy as sp

import roslib; roslib.load_manifest('scripting_util')
import rospy
import tf
import cv
import cv_bridge
import PyKDL as kdl

import std_msgs.msg as std_msgs
import geometry_msgs.msg as geometry_msgs
import sensor_msgs.msg as sensor_msgs

import Perception_msgs_upenn.msg as Perception_msgs 
import Perception_msgs_upenn.srv as Perception_srvs

import RosUtil as ru
import Transform as tr

import ObjectModel as om
import Perception

import Debug


## setup services 
downsampleService = ru.service_proxy('/pcl_voxel_downsampler/downsample', Perception_srvs.Downsample, not ru.is_sim());
planeFitService = ru.service_proxy('/plane_fit_server/plane_fit', Perception_srvs.PlaneFit, not ru.is_sim());
planeFit2Service = ru.service_proxy('/plane_fit_server/plane_fit2', Perception_srvs.PlaneFit2, not ru.is_sim());
pc2catService = ru.service_proxy('/point_cloud2_cat_server/point_cloud2_cat', Perception_srvs.PC2Cat, False);


PC2_DATATYPES = ('', 'i1', 'u1', 'i2', 'u2', 'i4', 'u4', 'f4', 'f8');
NUMPY_2_PC2_DATATYPE = { '':0, 'int8':1, 'uint8':2, 'int16':3, 'uint16':4, 'int32':5, 'uint32':6, 'float32':7, 'float64':8 };

def to_PointCloud2(*args, **kwargs):
  '''
    converts the input to a sensor_msgs/PointCloud2 message

    supported input:
      - ROS PointCloud2 messages
      - numpy structured array
      
      NYI:
        - ROS PointCloud messages
        - iterable of ROS Point messages
        - iterable of kdl Vectors
        - iterable of iterables
        - numpy array Nx3 or 3xN (if N == 3 then it is assumed Nx3)

    keyword args:
      - frame_id 
      - stamp

    NOTE: mixing types is not supported
  '''

  if len(args) > 0 and type(args[0]) == sensor_msgs.PointCloud2:
    return copy.deepcopy(args[0]);

  pc2 = sensor_msgs.PointCloud2();

  # assumed to be a numpy structured array 
  pts = args[0];
  (pc2.fields, ptstep) = get_point_fields(pts.dtype);

  if len(pts.shape) == 1:
    pc2.height = 1;
    pc2.width = pts.shape[0];
  else:
    pc2.height = pts.shape[0];
    pc2.width = pts.shape[1];

  pc2.is_bigendian = False;
  pc2.point_step = ptstep;
  pc2.row_step = ptstep * pc2.width;
  pc2.data = args[0].tostring();

  pc2.is_dense = True;

  if 'frame_id' in kwargs.keys():
    pc2.header.frame_id = kwargs['frame_id'];
  else:
    pc2.header.frame_id = ru.BASE_FRAME;

  if 'stamp' in kwargs.keys():
    pc2.header.stamp = kwargs['stamp'];
  else:
    pc2.header.stamp = rospy.Time();

  return pc2; 


def to_PointCloud2XYZ(*args, **kwargs):
  '''
    converts the input to a sensor_msgs/PointCloud2 message with fields x,y,z

    supported input:
      - numpy array Nx3 or 3xN (if N == 3 then it is assumed Nx3)
      
      NYI:
        - ROS PointCloud messages
        - iterable of ROS Point messages
        - iterable of kdl Vectors
        - iterable of iterables
        - numpy array Nx3 or 3xN (if N == 3 then it is assumed Nx3)
        - numpy array Nx3 or 3xN (if N == 3 then it is assumed Nx3)

    keyword args:
      - frame_id 
      - stamp

    NOTE: mixing types is not supported
  '''

  pc2 = sensor_msgs.PointCloud2();

  # assumed to be a numpy array 
  pts = args[0];
  if type(pts) == np.ndarray:
    # 3xN (N > 3)
    if (max(pts.shape) > 3 and pts.shape[1] > pts.shape[0]):
      pts = pts.T;
    # Nx3 or 3xN (N < 3)
    elif (pts.shape != (3,3) and pts.shape[0] == 3):
      pts = pts.T;

    # pts should be Nx3 now
    pc2.height = 1;
    pc2.width = pts.shape[0];

    # format fields
    pc2dtype = NUMPY_2_PC2_DATATYPE[pts.dtype.name];
    offset = pts.dtype.itemsize;
    pc2.fields = [sensor_msgs.PointField('x', 0, pc2dtype, 1),
                  sensor_msgs.PointField('y', offset, pc2dtype, 1),
                  sensor_msgs.PointField('z', 2*offset, pc2dtype, 1)];
    pc2.is_bigendian = False;

    pc2.point_step  = 3*offset;
    pc2.row_step = pc2.width * pc2.point_step;

    pc2.data = pts.tostring();
    pc2.is_dense = True;

  if 'frame_id' in kwargs.keys():
    pc2.header.frame_id = kwargs['frame_id'];
  else:
    pc2.header.frame_id = ru.BASE_FRAME;

  if 'stamp' in kwargs.keys():
    pc2.header.stamp = kwargs['stamp'];
  else:
    pc2.header.stamp = rospy.Time();

  return pc2; 


def from_PointCloud2(pc2):
  '''
    converts a PointCloud2 message to a structured numpy array
  '''
  # get point struct format
  fmt = get_field_fmt(pc2.fields, pc2.is_bigendian);

  # convert to numpy ndarray
  if (pc2.width == 0 and pc2.height == 0):
    a = np.array([], dtype=fmt);
  else:
    a = np.fromstring(pc2.data, dtype=fmt, count=pc2.width*pc2.height);

  # reshape for width/height
  return a.reshape((pc2.height, pc2.width));

def from_PointCloud2(pc2):
  '''
    converts a PointCloud2 message to a structured numpy array
  '''
  # get point struct format
  fmt = get_field_fmt(pc2.fields, pc2.is_bigendian);

  # convert to numpy ndarray
  if (pc2.width == 0 and pc2.height == 0):
    a = np.array([], dtype=fmt);
  else:
    a = np.fromstring(pc2.data, dtype=fmt, count=pc2.width*pc2.height);

  # reshape for width/height
  return a.reshape((pc2.height, pc2.width));


def get_field_fmt(fields, isBigEndian):
  '''
    formats the numpy datatype string from the field list
  '''
  bo = '>' if isBigEndian else '<';
 
  # sort fields by offset
  sfields = sorted(fields, key=lambda f: f.offset);

  # create field format tuples
  return map(lambda f: (f.name, bo+PC2_DATATYPES[f.datatype], f.count), sfields);


def get_point_fields(dtype):
  '''
    creates a PointField from a numpy dtype tuple list
  '''
  fields = [];
  offset = 0;
  for fname in dtype.names:
    pf = sensor_msgs.PointField();
    pf.name = fname;
    pf.datatype = NUMPY_2_PC2_DATATYPE[dtype[fname].name];
    pf.count = np.prod(dtype[fname].shape) if dtype[fname].shape else 1;
    pf.offset = offset;
    fields.append(pf);

    # update offset
    offset += dtype[fname].itemsize * pf.count;

  # return the fields and the point step (offset)
  return (fields, offset);


def structured_array2ndarray(arr):
  '''
    converts the structured array to an flattened ndarray 
    assumes all fields are the same datatype
    return array is NxD where each column is the flattened field
  '''
  dtypes = arr.dtype;
  flatarr = arr.flatten();
  narr = np.empty((len(flatarr), len(dtypes)), dtype=dtypes[0]);
  i = 0;
  for name in dtypes.names:
    narr[:,i] = flatarr[name];
    i += 1;

  return narr;


def extract_indicies(arr, ind):
  '''
    extracts the indicies from the given array

    assumes either Nx3 or 3xN
  '''
  ind = np.array(ind);
  if (max(arr.shape) > 3 and arr.shape[1] > arr.shape[0]
      or (arr.shape != (3,3) and arr.shape[0] == 3)):
    # input is 3xN
    inliers = np.array([False]*arr.shape[1]);
    inliers[ind] = True;
    return (arr[:,inliers], arr[:,inliers==False]);
  else:
    inliers = np.array([False]*arr.shape[0]);
    inliers[ind] = True;
    return (arr[inliers,:], arr[inliers==False,:]);


def get_bbox(pc, pose=None):
  '''
    get the bounding box for the point cloud
    if a pose is provided then it will find the bbox
      for the data aligned to that pose

    return: bbox array
        |xmin, xmax|
        |ymin, ymax|
        |zmin, zmax|
  '''
  pts = ru.to_array(pc);

  if pose != None:
    ps = ru.to_PoseStamped(pose);
    ps_wrtPC = ru.transformPose(ru.get_frame_id(pc), ps);

    T = tr.rospose2tr(ps_wrtPC.pose);
    pts = np.dot(np.linalg.inv(T), np.vstack((pts.T, np.ones(pts.shape[0])))).T; 

  pmin = np.min(pts[:,:3], axis=0);
  pmax = np.max(pts[:,:3], axis=0);
  bbox = np.array([pmin, pmax]).T;

  return bbox;


def get_centroid(pts):
  '''
    computes the centroid of the point cloud
  '''
  pts = ru.to_array(pts);

  return np.mean(pts, axis=0);


def get_ev(pts, includeEigenValues=False):
  '''
    computes the eigen vectors for the point cloud
    arr is expected to be Nx3

    return:
      array of row vectors (e1, e2, e3)
  '''
  pts = ru.to_array(pts);

  trans = -1 * np.mean(pts, axis=0);
  pts += trans;

  cov = np.cov(pts.T);
  (u, s, vh) = np.linalg.svd(cov);

  if includeEigenValues:
    return (vh, s);
  else:
    return vh;


def get_blob_pose(pts):
  '''
    computes the pose of the point cloud
    arr is expected to be Nx3

    return Pose
  '''
  pts = ru.to_array(pts);
  
  cent = get_centroid(pts);
  (x, y, z) = get_ev(pts);
  
  pose = geometry_msgs.Pose();
  pose.position = geometry_msgs.Point(*cent);
  pose.orientation = tr.ev2rosq((x,y,z));

  return pose;


def downsample(pts, leafSize=[0.005, 0.005, 0.005]):
  ''' downsample the point_cloud '''
  pc = ru.to_PointCloud(pts);
  
  try:
    resp = downsampleService(point_cloud=pc, leaf_size=leafSize);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': downsample: service request failed: %s' % e);
    return np.array([]);

  return ru.to_array(resp.point_cloud);


def plane_fit(pts, distance_thres=0.01): 
  ''' 
    fit a plane to the points 
    coefs in the form (ax + by + cz + d = 0)
  '''
  pc = ru.to_PointCloud(pts);
  
  try:
    resp = planeFitService(point_cloud=pc, distance_thres=distance_thres);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': plane_fit: service request failed: %s' % e);
    return (None, None);

  return (resp.model_coef, resp.inliers);


def plane_fit2(pc2, distance_thres=0.01): 
  ''' 
    fit a plane to the points 
    coef in the form (ax + by + cz + d = 0)
  '''
  try:
    resp = planeFit2Service(point_cloud2=pc2, distance_thres=distance_thres);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': plane_fit2: service request failed: %s' % e);
    return (None, None);

  return (resp.model_coef, np.array(resp.inliers));


def pc2_cat(*args):
  ''' concatenate the point clouds '''
  if (len(args) == 1 and hasattr(args[0], '__iter__')):
    pc2s = args[0];
  else:
    pc2s = args;
  
  try:
    resp = pc2catService(point_clouds=pc2s);
  except rospy.ServiceException, e:
    rospy.logerr(__name__ + ': pc2_cat: service request failed: %s' % e);
    return np.array([]);

  return resp.point_cloud;


def estimate_normals(pts, k=5, weightNeighbors=True, viewpoint=None):
  '''
    estimates the point cloud normals from an unorder point cloud
    pts: NxD point array
    k: number of nearest neighbors to consider
    weightNeighbors: flag indicating that weights on the neighbors should be used
    viewpoint: vector indicating the viewpoint direction to correct direction
  '''
  def compute_normal(pts):
    cent = np.mean(pts);
    cov = np.cov(np.transpose(pts - cent));
    (u, s, vh) = np.linalg.svd(cov);
    return vh[2,:];

  pts = ru.to_array(pts);
  
  # compute distance matrix
  d = distance_matrix(pts, pts);
  # find nearest neighbors
  nn = np.argsort(d, axis=1);

  normals = np.array(map(lambda row: compute_normal(pts[row[:k+1],:]), nn));

  if (viewpoint != None):
    vcheck = map(lambda i: np.dot(normals[i,:], viewpoint - pts[i,:]), np.arange(pts.shape[0]));
    normals[(vcheck < 0),:] *= -1.0;

  return normals;


def distance_matrix(a, b):
  ''' 
    returns the distance matrix for two sets of points
    using euclidean distance d = sqrt(sum((a-b)**2))
    
    a and b are NxD matrixes 
  '''
  a = a.T;
  b = b.T;

  aa = np.array([np.sum(a**2, axis=0)]);
  bb = np.array([np.sum(b**2, axis=0)]);
  ab = np.dot(a.T, b);

  d = np.sqrt(np.repeat(aa.T, bb.shape[1], axis=1) + np.repeat(bb, aa.shape[1], axis=0) - 2*ab);

  return d;


def create_normals_pose_array(pts, normals, frame_id=ru.BASE_FRAME):
  ''' 
    creates a pose array for visualizing the normals 
    pts: Nx3 array of points
    normals: Nx3 array of corresponding normals
  '''
  def compute_pose(c, n):
    v = np.cross([1, 0, 0], n);
    v /= np.linalg.norm(v);
    th = ru.angle_between([1, 0, 0], n);
    return geometry_msgs.Pose(geometry_msgs.Point(*c), tr.axis_angle2rosq(v, th));

  pa = geometry_msgs.PoseArray();
  pa.header.frame_id = frame_id;
  pa.poses = map(lambda i: compute_pose(pts[i,:], normals[i,:]), np.arange(pts.shape[0]));
  return pa;


def line_line_closest_point(p1, n1, p2, n2):
  ''' 
    computes the closest point of intersection from the point/normal pairs 
    
    solve the system for (s,t):
    (n1.n1)*s - (n1.n2)*t = n1.(p2-p1)
    (n1.n2)*s - (n2.n2)*t = n2.(p2-p1)

    return: (p1 + s*n1, p2 + t*n2);
  '''
  p1 = np.array(p1);
  p2 = np.array(p2);

  A = np.array([[np.dot(n1, n1), -np.dot(n1, n2)],
                [np.dot(n1, n2), -np.dot(n2, n2)]]);

  try:
    Ainv = np.linalg.inv(A);
  except np.linalg.LinAlgError, err:
    rospy.logwarn(__name__ + ': line_line_closest_point: lines are parallel');
    # parrallel lines
    return (p1, p2);

  (s,t) = np.dot(Ainv, np.array([np.dot(n1, (p2-p1)), np.dot(n2, (p2-p1))]));

  return (p1 + s*n1, p2 + t*n2);


def line_plane_intersection(lp, ln, pp, pn):
  '''
    computes the point intersection of the line and plane from the point/normal pairs
    lp,ln - parameterized form of the line (point, dir) p = s*ln + lp

    s = (pp - lp).pn / (ln.pn)

    return: (intersection)
  '''
  lp = np.array(lp);
  ln = np.array(ln);
  pp = np.array(pp);
  pn = np.array(pn);

  num = np.dot((pp - lp), pn);
  dem = np.dot(ln, pn);

  if (np.abs(dem) < 1e-10):
    if (np.abs(num) < 1e-10):
      # line is on the plane
      return (pp);
    else:
      # they are parallel
      rospy.logwarn(__name__ + ': line_plane_intersection: line/plane are parallel');
      return (pp);

  return (lp + (num/dem)*ln);


def plane_plane_intersection(p1, n1, p2, n2):
  ''' 
    computes the line intersection of the two planes from the point/normal pairs
    (from Gellert et al. 1982)

    # in hessian normal form (n.x = -p)
    A = [n1; n2]
    b = [p1; p2]
    A.p = b

    return the parameterized line form
    return: (point, direction)
  '''
  p1 = np.array(p1);
  n1 = np.array(n1);
  p2 = np.array(p2);
  n2 = np.array(n2);

  # direction is the cross of the normals
  a = np.cross(n1, n2);
  a /= np.linalg.norm(a);

  A = np.array([n1, n2]);
  b = np.array([np.linalg.norm(p1), np.linalg.norm(p2)]);
  try:
    Ainv = np.linalg.pinv(A);
  except np.linalg.LinAlgError, err:
    rospy.logwarn(__name__ + ': plane_plane_intersection: planes are parallel. %s' % err);
    # parrallel planes
    return (p1, a);
  
  p = np.dot(Ainv, b);

  return (p, a);


def fit_plane(p1, n1, p2, n2, p3, n3, alpha=np.deg2rad(30.0)):
  ''' 
    fit a plane to the three point/normal pairs 
    alpha: angle thres for determining if the fit is a valid sphere
          both normals must be < alpha from the sphere normals

    return (valid, p, normal);
      valid is a bool indicating if the fit was valid based on the points and normals
  '''
  p1 = np.asarray(p1);
  n1 = np.asarray(n1);
  p2 = np.asarray(p2);
  n2 = np.asarray(n2);
  p3 = np.asarray(p3);
  n3 = np.asarray(n3);

  v1 = p2 - p1;
  v2 = p3 - p1;
  n = np.cross(v1, v2);
  n /= np.linalg.norm(n);

  sa = np.sin(alpha);
  sang = map(lambda nx: np.sin(np.abs(ru.angle_between(n, nx))), [n1, n2, n3]);
  if (np.any(sang > sa)):
    return (False, p1, n);
  return (True, p1, n);


def fit_sphere(p1, n1, p2, n2, eps=0.005, alpha=np.deg2rad(30.0)):
  ''' 
    fit a sphere to the two point/normal pairs 
    eps: distance thres for determining if the fit is a valid sphere
          both points must be < eps from the sphere
    alpha: angle thres for determining if the fit is a valid sphere
          both normals must be < alpha from the sphere normals

    return (valid, center, radius);
      valid is a bool indicating if the fit was valid based on the points and normals
  '''
  p1 = np.asarray(p1);
  n1 = np.asarray(n1);
  p2 = np.asarray(p2);
  n2 = np.asarray(n2);

  # find closes points on the lines
  (pc0, pc1) = line_line_closest_point(p1, n1, p2, n2);
  # center of the sphere
  c = (pc0 + pc1) / 2.0;
  # compute radius
  r = (np.linalg.norm(p1-c) + np.linalg.norm(p2-c))/2.0;

  # check if the fit is valid
  if ((np.abs(r - np.linalg.norm(p1 - c)) > eps)
      or (np.abs(r - np.linalg.norm(p2 - c)) > eps)):
    return (False, c, r);

  sa = np.sin(alpha);
  if ((np.sin(np.abs(ru.angle_between(n1, p1-c))) > sa)
      or (np.sin(np.abs(ru.angle_between(n2, p2-c))) > sa)):
    return (False, c, r);
  
  return (True, c, r);


def fit_cylinder(p1, n1, p2, n2, eps=0.005, alpha=np.deg2rad(10.0)):
  ''' 
    fit a cylinder to the two point/normal pairs 
    eps: distance thres for determining if the fit is a valid cylinder
          both points must be < eps from the cylinder
    alpha: angle thres for determining if the fit is a valid cylinder
          both normals must be < alpha from the cylinder normals

    return (valid, center, axis, radius);
      valid is a bool indicating if the fit was valid based on the points and normals
  '''
  p1 = np.asarray(p1);
  n1 = np.asarray(n1);
  p2 = np.asarray(p2);
  n2 = np.asarray(n2);

  # find cylinder axis
  a = np.cross(n1, n2);
  a /= np.linalg.norm(a);

  # project lines (defined by the point/normal) onto the plane defined by a.x = 0
  pp1 = p1 - a * np.dot(a, p1);
  pn1 = n1 - a * np.dot(a, n1);
  pp2 = p2 - a * np.dot(a, p2);
  pn2 = n2 - a * np.dot(a, n2);
  
  # find intersection
  (c, c1) = line_line_closest_point(pp1, pn1, pp2, pn2);

  # cylinder radius
  r = np.linalg.norm(pp1 - c);

  # check if the fit is valid
  
  # find rejections of the points from the cylinder axis
  cp1 = pp1 - c;
  cp2 = pp2 - c;
  ca = c + a;
  rej1 = cp1 - np.dot(cp1, ca)*ca; 
  rej2 = cp2 - np.dot(cp2, ca)*ca; 

  pa = create_normals_pose_array(np.array([p1,p2]), np.array([rej1,rej2]));
  #Debug.pa1Pub.publish(pa);
  print rej1
  print rej2
  print np.sin(np.abs(ru.angle_between(rej1, n1)))
  print np.sin(np.abs(ru.angle_between(rej2, n2)))
  print np.abs(r - np.linalg.norm(rej1))
  print np.abs(r - np.linalg.norm(rej2))


  sa = np.sin(alpha);
  if (((np.sin(np.abs(ru.angle_between(rej1, n1)))) > sa)
      or (np.sin(np.abs(ru.angle_between(rej2, n2))) > sa)):
    return (False, c, a, r);

  if ((np.abs(r - np.linalg.norm(rej1)) > eps)
      or (np.abs(r - np.linalg.norm(rej2)) > eps)):
    return (False, c, a, r);

  sa = np.sin(alpha);
  if (((np.sin(np.abs(ru.angle_between(rej1, n1)))) > sa)
      or (np.sin(np.abs(ru.angle_between(rej2, n2))) > sa)):
    return (False, c, a, r);
  
  return (True, c, a, r);


def fit_cone(p1, n1, p2, n2, p3, n3, eps=0.005, alpha=np.deg2rad(10.0)):
  ''' 
    fit a cone to the three point/normal pairs 
    eps: distance thres for determining if the fit is a valid cylinder
          both points must be < eps from the cylinder
    alpha: angle thres for determining if the fit is a valid cylinder
          both normals must be < alpha from the cylinder normals

    return (valid, apex, axis, opening angle);
      valid is a bool indicating if the fit was valid based on the points and normals
  '''
  p1 = np.asarray(p1);
  n1 = np.asarray(n1);
  p2 = np.asarray(p2);
  n2 = np.asarray(n2);
  p3 = np.asarray(p3);
  n3 = np.asarray(n3);

  # find cone apex (intersection of the 3 planes formed by the point/normal pairs)
  # line normal from plane 1/2 intersection
  (lp, ln) = plane_plane_intersection(p1, n1, p2, n2);
  c = line_plane_intersection(lp, ln, p3, n3);

  # find the axis from the normal of the plane formed by the three points
  pc1 = c + (p1 - c)/np.linalg.norm(p1 - c);
  pc2 = c + (p2 - c)/np.linalg.norm(p2 - c);
  pc3 = c + (p3 - c)/np.linalg.norm(p3 - c);
  a = np.cross(pc2 - pc1, pc3 - pc1);
  a /= np.linalg.norm(a);

  # find opening anlge
  ac = np.array(map(lambda p: ru.angle_between(p - c, a), [p1, p2, p3]));
  w = np.sum(ac)/3.0;

  # check validity

  # project each point onto the axis
  p1_proj_a = np.dot(p1 - c, a) * a;
  p2_proj_a = np.dot(p2 - c, a) * a;
  p3_proj_a = np.dot(p3 - c, a) * a;
  # and rejections
  p1_rej_a = (p1 - c) - p1_proj_a;
  p2_rej_a = (p2 - c) - p2_proj_a;
  p3_rej_a = (p3 - c) - p3_proj_a;

  # projection mag
  d1 = np.linalg.norm(p1_proj_a);
  d2 = np.linalg.norm(p2_proj_a);
  d3 = np.linalg.norm(p3_proj_a);
  # mag of vector from axis to cone edge
  r1 = d1 * np.tan(w);
  r2 = d2 * np.tan(w);
  r3 = d3 * np.tan(w);

  # scale rejections to find the cone point 
  c1 = c + p1_proj_a + (r1/np.linalg.norm(p1_rej_a))*p1_rej_a;
  c2 = c + p2_proj_a + (r2/np.linalg.norm(p2_rej_a))*p2_rej_a;
  c3 = c + p3_proj_a + (r3/np.linalg.norm(p3_rej_a))*p3_rej_a;
  

  # is the point within distance thres?
  distToCone = np.array([np.linalg.norm(p1 - c1), np.linalg.norm(p2 - c2), np.linalg.norm(p3 - c3)]);
  if np.any(distToCone > eps):
    return (False, c, a, w);

  # compute cone normals
  cn1 = np.cross(np.cross(a, (c1 - c)), (c1 - c));
  cn2 = np.cross(np.cross(a, (c2 - c)), (c2 - c));
  cn3 = np.cross(np.cross(a, (c3 - c)), (c3 - c));
  cn1 /= np.linalg.norm(cn1);
  cn2 /= np.linalg.norm(cn2);
  cn3 /= np.linalg.norm(cn3);

  # are the normals close?
  sa = np.sin(alpha);
  if ((np.sin(np.abs(ru.angle_between(cn1, n1))) > sa)
      or (np.sin(np.abs(ru.angle_between(cn2, n2))) > sa)
      or (np.sin(np.abs(ru.angle_between(cn3, n3))) > sa)):
    return (False, c, a, w);

  return (True, c, a, w);



def rand_cylinder(pts, normals):
  ''' fits cylinder to two random points and display the result '''
  rnd1 = random.randint(0, pts.shape[0]-1);
  rnd2 = random.randint(0, pts.shape[0]-1);
  p1 = pts[rnd1, :];
  p2 = pts[rnd2, :];
  n1 = normals[rnd1, :];
  n2 = normals[rnd2, :];

  # fit cylinder
  (valid, c, a, r) = fit_cylinder(p1, n1, p2, n2, eps=.01, alpha=np.deg2rad(10));

  # project points onto axis to find better center
  c += a*(np.dot(a, p1-c) + np.dot(a, p2-c))/2.0;

  print ('valid: %s' % valid);

  # publish points
  pa = create_normals_pose_array(np.array([p1,p2]), np.array([n1,n2]));
  #Debug.pa0Pub.publish(pa);

  # create marker
  cmarker = Debug.cylinder_marker(c, a, r, length=.1);
  Debug.markerPub.publish(cmarker);

  return (p1, n1, p2, n2, valid, c, a, r);


def least_squares_cylinder(pts):
  ''' least squares fitting for a cylinder '''
  pass



def floodlight_pose_from_blob(floodlight):
  '''
    determines the floodlight pose from the blob point cloud
    
    if lying on the side then the pose is tilted ~24deg
    x-axis points up through the screw part
  '''
  pts = ru.to_array(floodlight);

  # slice off top
  itop = (pts[:,2] > np.max(pts[:,2]) - 0.05);
  topPts = pts[itop,:];
  #Debug.pc0Pub.publish(ru.to_PointCloud(pts[~itop,:]));
  #Debug.pc1Pub.publish(ru.to_PointCloud(topPts));
  nztopPts = topPts.copy();
  nztopPts[:,2] = 0.0; 
  #Debug.pc2Pub.publish(ru.to_PointCloud(nztopPts));

  # create pose
  (ex, ey, ez) = get_ev(nztopPts); 
  ez = np.cross(ex, ey);
  rospy.loginfo(__name__ + ': top ev: x=%s, y=%s, z=%s' % (ex, ey, ez));
  topPose = ru.to_Pose(np.dot(tr.trans(np.mean(topPts, axis=0)), tr.ev2rot((ex, ey, ez))));
  #Debug.ps0Pub.publish(ru.to_PoseStamped(topPose));

  # axis aligned bbox
  topBBox = get_bbox(topPts, topPose);
  topBBoxSize = topBBox[:,1] - topBBox[:,0];
  aspect = topBBoxSize[0]/topBBoxSize[1];

  rospy.loginfo(__name__ + ': topBBoxSize: %s' % topBBoxSize);
  rospy.loginfo(__name__ + ': aspect: %0.3f' % aspect);

  isSide = False;
  if np.any(topBBoxSize[:2] > 0.07):
    isSide = True;
  if (aspect > 4.0):
    isSide = True;

  # format pose
  # use CoM of just the top points (it is closer to the actual than using all of the points)
  # height will be refined by the model
  t = np.mean(topPts, axis=0);

  if isSide:
    # determine x-axis direction
    # use minor axis from the svd of the top points
    ex = ey.copy();
    ey = np.array([0.0, 0.0, 1.0]);
    ez = np.cross(ex, ey);
    R = tr.ev2rot((ex, ey, ez));
    # check to make sure direction of x is correct
    pts_wrtR = np.dot(np.linalg.inv(R), np.vstack(((pts - t).T, np.ones(pts.shape[0])))).T[:,:3];
    xmax = np.max(pts_wrtR[:,0]);
    xmin = np.min(pts_wrtR[:,0]);
    rospy.loginfo(__name__ + ': xmax = %0.3f, xmin = %0.3f' % (xmax, xmin))
    # special case when we are looking directly at the light
    if (xmax < 0.055 and xmin > -0.055):
      # x-axis should be away from the robot
      if (ex[0] < 0):
        ex = -ex;
        ez = np.cross(ex, ey);
        R = tr.ev2rot((ex, ey, ez));
    elif (np.abs(xmin) > np.abs(xmax)):
      # flip x
      ex = -ex;
      ez = np.cross(ex, ey);
      R = tr.ev2rot((ex, ey, ez));

    # side pose is tilted slightly (24deg)
    R = np.dot(R, tr.rotz(np.deg2rad(-24.0)));

  else:
    # upright pose is ambiguous about the x-axis
    ex = np.array([0.0, 0.0, 1.0]);
    ey = np.array([1.0, 0.0, 0.0]);
    ez = np.cross(ex, ey);
    R = tr.ev2rot((ex, ey, ez));
 
  T = np.dot(tr.trans(t), R);
  ps = ru.to_PoseStamped(T);
  ps = om.refine_height('floodlight', ps, Perception.table_height());

  #Debug.ps2Pub.publish(ps);
  #Debug.pc4Pub.publish(ru.to_PointCloud(om.get_model('floodlight', ps)));

  return ps;
    

def test_floodlight():
  import Bumblebee2 as bb2
  blobs = bb2.tabletop_blob().blobs;
  
  if (len(blobs) == 0):
    print('no blobs');
    return;

  imax = np.argmax([len(b.points) for b in blobs]);
  blob = blobs[imax];

  print('floodlight is: %s' % 'upright' if ru.is_vertical(floodlight_pose_from_blob(ru.to_array(blob.points)), [1.0, 0.0, 0.0]) else 'side');



def flat_pelican_case_pose_from_blob(pelican):
  '''
    determines the pelican case pose from the blob point cloud
      (assuming the case is flat on the table)
  '''
  pts = ru.to_array(floodlight);

  # slice off top
  itop = (pts[:,2] > np.max(pts[:,2]) - 0.05);
  topPts = pts[itop,:];
  #Debug.pc0Pub.publish(ru.to_PointCloud(pts[~itop,:]));
  #Debug.pc1Pub.publish(ru.to_PointCloud(topPts));
  nztopPts = topPts.copy();
  nztopPts[:,2] = 0.0; 
  #Debug.pc2Pub.publish(ru.to_PointCloud(nztopPts));

  # create pose
  (ex, ey, ez) = get_ev(nztopPts); 
  ez = np.cross(ex, ey);
  rospy.loginfo(__name__ + ': top ev: x=%s, y=%s, z=%s' % (ex, ey, ez));
  topPose = ru.to_Pose(np.dot(tr.trans(np.mean(topPts, axis=0)), tr.ev2rot((ex, ey, ez))));
  #Debug.ps0Pub.publish(ru.to_PoseStamped(topPose));

  # axis aligned bbox
  topBBox = get_bbox(topPts, topPose);
  topBBoxSize = topBBox[:,1] - topBBox[:,0];
  aspect = topBBoxSize[0]/topBBoxSize[1];

  rospy.loginfo(__name__ + ': topBBoxSize: %s' % topBBoxSize);
  rospy.loginfo(__name__ + ': aspect: %0.3f' % aspect);

  isSide = False;
  if np.any(topBBoxSize[:2] > 0.07):
    isSide = True;
  if (aspect > 4.0):
    isSide = True;

  # format pose
  # use CoM of just the top points (it is closer to the actual than using all of the points)
  # height will be refined by the model
  t = np.mean(topPts, axis=0);

  if isSide:
    # determine x-axis direction
    # use minor axis from the svd of the top points
    ex = ey.copy();
    ey = np.array([0.0, 0.0, 1.0]);
    ez = np.cross(ex, ey);
    R = tr.ev2rot((ex, ey, ez));
    # check to make sure direction of x is correct
    pts_wrtR = np.dot(np.linalg.inv(R), np.vstack(((pts - t).T, np.ones(pts.shape[0])))).T[:,:3];
    xmax = np.max(pts_wrtR[:,0]);
    xmin = np.min(pts_wrtR[:,0]);
    rospy.loginfo(__name__ + ': xmax = %0.3f, xmin = %0.3f' % (xmax, xmin))
    # special case when we are looking directly at the light
    if (xmax < 0.055 and xmin > -0.055):
      # x-axis should be away from the robot
      if (ex[0] < 0):
        ex = -ex;
        ez = np.cross(ex, ey);
        R = tr.ev2rot((ex, ey, ez));
    elif (np.abs(xmin) > np.abs(xmax)):
      # flip x
      ex = -ex;
      ez = np.cross(ex, ey);
      R = tr.ev2rot((ex, ey, ez));

    # side pose is tilted slightly (24deg)
    R = np.dot(R, tr.rotz(np.deg2rad(-24.0)));

  else:
    # upright pose is ambiguous about the x-axis
    ex = np.array([0.0, 0.0, 1.0]);
    ey = np.array([1.0, 0.0, 0.0]);
    ez = np.cross(ex, ey);
    R = tr.ev2rot((ex, ey, ez));
 
  T = np.dot(tr.trans(t), R);
  ps = ru.to_PoseStamped(T);
  ps = om.refine_height('floodlight', ps, Perception.table_height());

  #Debug.ps2Pub.publish(ps);
  #Debug.pc4Pub.publish(ru.to_PointCloud(om.get_model('floodlight', ps)));

  return ps;
 

class BlobBoundingBox:
  '''
  An axis-aligned bounding box (AABB) for a blob.
  
  Additional points can be added at a later time, but not removed.
  '''

  def __init__(self, blob):
    '''
    blob is a Perception_msgs_upen.BlobStamped.
    blob.points must not be empty
    '''

    self.min = geometry_msgs.Point32()
    self.max = geometry_msgs.Point32()
    
    if len(blob.points) == 0:
      raise Exception("blob has no points")
    
    # initialize min and max
    self.min = copy.deepcopy(blob.points[0])
    self.max = copy.deepcopy(blob.points[0])
    
    self.addPoints(blob.points)
    # # fill in min and max
    # for point in blob.points:

    #   if point.x < self.min.x:
    #     self.min.x = point.x
    #   if point.y < self.min.y:
    #     self.min.y = point.y
    #   if point.z < self.min.z:
    #     self.min.z = point.z

    #   if point.x > self.max.x:
    #     self.max.x = point.x
    #   if point.y > self.max.y:
    #     self.max.y = point.y
    #   if point.z > self.max.z:
    #     self.max.z = point.z

  def addPoints(self, points):
    ''' add more points to this bounding box'''
    for point in points:
      if point.x < self.min.x:
        self.min.x = point.x
      if point.y < self.min.y:
        self.min.y = point.y
      if point.z < self.min.z:
        self.min.z = point.z
      if point.x > self.max.x:
        self.max.x = point.x
      if point.y > self.max.y:
        self.max.y = point.y
      if point.z > self.max.z:
        self.max.z = point.z
    
  def __str__(self):
    return "x=[%f:%f], y=[%f:%f], z=[%f:%f]" % (self.min.x, self.max.x, self.min.y, self.max.y, self.min.z, self.max.z)

  def isInBox(self, point):
    '''
    Takes a geometry_msgs.Point or geometry_msgs.Point32 and returns
    True if the point is inside this bounding box.
    '''
    if point.x >= self.min.x and \
          point.x <= self.max.x and \
          point.y >= self.min.y and \
          point.y <= self.max.y and \
          point.z >= self.min.z and \
          point.z <= self.max.z:
      return True
    return False
  
  def isInBoxXY(self, point):
    return point.x >= self.min.x and \
        point.x <= self.max.x and \
        point.y >= self.min.y and \
        point.y <= self.max.y
        

  def corners(self):
    '''
    Return the 6 corner points of the bounding box.
    '''
    return (geometry_msgs.Point32(self.min.x, self.min.y, self.min.z),
            geometry_msgs.Point32(self.min.x, self.min.y, self.max.z),
            geometry_msgs.Point32(self.max.x, self.min.y, self.max.z),
            geometry_msgs.Point32(self.max.x, self.min.y, self.min.z),
            geometry_msgs.Point32(self.min.x, self.max.y, self.min.z),
            geometry_msgs.Point32(self.min.x, self.max.y, self.max.z),
            geometry_msgs.Point32(self.max.x, self.max.y, self.max.z),
            geometry_msgs.Point32(self.max.x, self.max.y, self.min.z))
  
  def isOverlappingBox(self, box):
    '''
    Takes another BlobBoundingBox and returns True if their bounding boxes overlap.
    '''
    # From http://en.wikipedia.org/wiki/Bounding_volume#Basic_intersection_checks
    # For an AABB defined by M,N against one defined by O,P they do not intersect if:
    # (Mx>Px) or (Ox>Nx) or (My>Py) or (Oy>Ny) or (Mz>Pz) or (Oz>Nz).
    if (self.min.x > box.max.x) or \
          (box.min.x > self.max.x) or \
          (self.min.y > box.max.y) or \
          (box.min.y > self.max.y) or \
          (self.min.z > box.max.z) or \
          (box.min.z > self.max.z):
      return False
    return True

  def combineBox(self, box):
    self.min.x = min(self.min.x, box.min.x)
    self.min.y = min(self.min.y, box.min.y)
    self.min.z = min(self.min.z, box.min.z)
    self.max.x = max(self.max.x, box.max.x)
    self.max.y = max(self.max.y, box.max.y)
    self.max.z = max(self.max.z, box.max.z)
